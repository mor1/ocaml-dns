OASISFormat: 0.3
OCamlVersion: >= 3.12
Name:        dns
Version:     0.4.1
Authors:     Anil Madhavapeddy, Tim Deegan, Richard Mortier, Haris Rotsos
License:     LGPL-2.0 with OCaml linking exception
Synopsis:    DNS protocol library for Lwt
Plugins:     META (0.3)
BuildTools:  ocamlbuild

Library dns
  Path: lib 
  Findlibname: dns
  Pack: true
  Modules: 
    Base64, Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie, 
    Zone, Zone_lexer, Zone_parser
  BuildDepends:	cstruct, cstruct.syntax, re, re.str

Flag lwt
  Description: build against the Lwt library (for Unix)
  Default: false

Flag mirage
  Description: build against the Mirage library (uses Lwt)
  Default: false

Library server_lwt_unix
  Build$: flag(lwt)
  Install$: flag(lwt)
  Path: server
  FindlibName: server_lwt_unix
  FindlibParent: dns
  BuildDepends: lwt, lwt.unix, lwt.syntax, cstruct, cstruct.syntax, dns
  Modules: Server_lwt_unix

Library resolver_lwt_unix
  Build$: flag(lwt)
  Install$: flag(lwt)
  Path: resolver
  FindlibName: resolver_lwt_unix
  FindlibParent: dns
  BuildDepends: lwt.syntax, cstruct, cstruct.syntax, dns, lwt, lwt.unix
  Modules: Resolver_lwt_unix

Library server_lwt_mirage
  Build$: flag(mirage)
  Install$: flag(mirage)
  Path: server
  FindlibName: server_lwt_mirage
  FindlibParent: dns
  BuildDepends: lwt.syntax, cstruct, cstruct.syntax, dns, mirage, mirage-net
  Modules: Server_lwt_mirage

Library resolver_lwt_mirage
  Build$: flag(mirage)
  Install$: flag(mirage)
  Path: resolver
  FindlibName: resolver_lwt_mirage
  FindlibParent: dns
  BuildDepends: lwt.syntax, cstruct, cstruct.syntax, dns, mirage, mirage-net
  Modules: Resolver_lwt_mirage

Document dns
  Title:                DNS docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Install:              false
  XOCamlbuildPath:      lib  
  XOCamlbuildLibraries: dns

Executable lwt_unix_server
  Path:               bin
  MainIs:             lwt_unix_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, dns.server_lwt_unix

Executable lwt_unix_time_server
  Path:               bin
  MainIs:             lwt_unix_time_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, dns.server_lwt_unix

Executable odig
  Path:               bin
  MainIs:             odig.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, dns.resolver_lwt_unix, uri

Executable lwt_mirage_server
  Path:               bin
  MainIs:             lwt_mirage_server.ml
  Build$:             flag(tests) && flag(mirage)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       dns, dns.server_lwt_mirage


# Test lwt_server
#   Run$:               flag(tests)
#   Command:            $lwt_server
#   WorkingDirectory:   lib_test
